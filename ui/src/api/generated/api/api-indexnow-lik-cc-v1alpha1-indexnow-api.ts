/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.20.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Post } from '../models';
/**
 * ApiIndexnowLikCcV1alpha1IndexnowApi - axios parameter creator
 * @export
 */
export const ApiIndexnowLikCcV1alpha1IndexnowApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 推送文章到 IndexNow
         * @param {Post} post 要推送的文章
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushIndexNow: async (post: Post, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'post' is not null or undefined
            assertParamExists('pushIndexNow', 'post', post)
            const localVarPath = `/apis/api.indexnow.lik.cc/v1alpha1/push`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(post, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiIndexnowLikCcV1alpha1IndexnowApi - functional programming interface
 * @export
 */
export const ApiIndexnowLikCcV1alpha1IndexnowApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiIndexnowLikCcV1alpha1IndexnowApiAxiosParamCreator(configuration)
    return {
        /**
         * 推送文章到 IndexNow
         * @param {Post} post 要推送的文章
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pushIndexNow(post: Post, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pushIndexNow(post, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiIndexnowLikCcV1alpha1IndexnowApi.pushIndexNow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApiIndexnowLikCcV1alpha1IndexnowApi - factory interface
 * @export
 */
export const ApiIndexnowLikCcV1alpha1IndexnowApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiIndexnowLikCcV1alpha1IndexnowApiFp(configuration)
    return {
        /**
         * 推送文章到 IndexNow
         * @param {ApiIndexnowLikCcV1alpha1IndexnowApiPushIndexNowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushIndexNow(requestParameters: ApiIndexnowLikCcV1alpha1IndexnowApiPushIndexNowRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.pushIndexNow(requestParameters.post, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for pushIndexNow operation in ApiIndexnowLikCcV1alpha1IndexnowApi.
 * @export
 * @interface ApiIndexnowLikCcV1alpha1IndexnowApiPushIndexNowRequest
 */
export interface ApiIndexnowLikCcV1alpha1IndexnowApiPushIndexNowRequest {
    /**
     * 要推送的文章
     * @type {Post}
     * @memberof ApiIndexnowLikCcV1alpha1IndexnowApiPushIndexNow
     */
    readonly post: Post
}

/**
 * ApiIndexnowLikCcV1alpha1IndexnowApi - object-oriented interface
 * @export
 * @class ApiIndexnowLikCcV1alpha1IndexnowApi
 * @extends {BaseAPI}
 */
export class ApiIndexnowLikCcV1alpha1IndexnowApi extends BaseAPI {
    /**
     * 推送文章到 IndexNow
     * @param {ApiIndexnowLikCcV1alpha1IndexnowApiPushIndexNowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiIndexnowLikCcV1alpha1IndexnowApi
     */
    public pushIndexNow(requestParameters: ApiIndexnowLikCcV1alpha1IndexnowApiPushIndexNowRequest, options?: RawAxiosRequestConfig) {
        return ApiIndexnowLikCcV1alpha1IndexnowApiFp(this.configuration).pushIndexNow(requestParameters.post, options).then((request) => request(this.axios, this.basePath));
    }
}

