/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.20.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HandsomeIndexNowLogs } from '../models';
// @ts-ignore
import type { HandsomeIndexNowLogsList } from '../models';
// @ts-ignore
import type { JsonPatchInner } from '../models';
/**
 * HandsomeIndexNowLogsV1alpha1Api - axios parameter creator
 * @export
 */
export const HandsomeIndexNowLogsV1alpha1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create HandsomeIndexNowLogs
         * @param {HandsomeIndexNowLogs} [handsomeIndexNowLogs] Fresh handsomeindexnowlogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHandsomeIndexNowLogs: async (handsomeIndexNowLogs?: HandsomeIndexNowLogs, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/indexnow.lik.cc/v1alpha1/handsomeindexnowlogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(handsomeIndexNowLogs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete HandsomeIndexNowLogs
         * @param {string} name Name of handsomeindexnowlogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHandsomeIndexNowLogs: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteHandsomeIndexNowLogs', 'name', name)
            const localVarPath = `/apis/indexnow.lik.cc/v1alpha1/handsomeindexnowlogs/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get HandsomeIndexNowLogs
         * @param {string} name Name of handsomeindexnowlogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHandsomeIndexNowLogs: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getHandsomeIndexNowLogs', 'name', name)
            const localVarPath = `/apis/indexnow.lik.cc/v1alpha1/handsomeindexnowlogs/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List HandsomeIndexNowLogs
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHandsomeIndexNowLogs: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/indexnow.lik.cc/v1alpha1/handsomeindexnowlogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch HandsomeIndexNowLogs
         * @param {string} name Name of handsomeindexnowlogs
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchHandsomeIndexNowLogs: async (name: string, jsonPatchInner?: Array<JsonPatchInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchHandsomeIndexNowLogs', 'name', name)
            const localVarPath = `/apis/indexnow.lik.cc/v1alpha1/handsomeindexnowlogs/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatchInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update HandsomeIndexNowLogs
         * @param {string} name Name of handsomeindexnowlogs
         * @param {HandsomeIndexNowLogs} [handsomeIndexNowLogs] Updated handsomeindexnowlogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHandsomeIndexNowLogs: async (name: string, handsomeIndexNowLogs?: HandsomeIndexNowLogs, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateHandsomeIndexNowLogs', 'name', name)
            const localVarPath = `/apis/indexnow.lik.cc/v1alpha1/handsomeindexnowlogs/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(handsomeIndexNowLogs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HandsomeIndexNowLogsV1alpha1Api - functional programming interface
 * @export
 */
export const HandsomeIndexNowLogsV1alpha1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HandsomeIndexNowLogsV1alpha1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Create HandsomeIndexNowLogs
         * @param {HandsomeIndexNowLogs} [handsomeIndexNowLogs] Fresh handsomeindexnowlogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createHandsomeIndexNowLogs(handsomeIndexNowLogs?: HandsomeIndexNowLogs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandsomeIndexNowLogs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createHandsomeIndexNowLogs(handsomeIndexNowLogs, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HandsomeIndexNowLogsV1alpha1Api.createHandsomeIndexNowLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete HandsomeIndexNowLogs
         * @param {string} name Name of handsomeindexnowlogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHandsomeIndexNowLogs(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHandsomeIndexNowLogs(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HandsomeIndexNowLogsV1alpha1Api.deleteHandsomeIndexNowLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get HandsomeIndexNowLogs
         * @param {string} name Name of handsomeindexnowlogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHandsomeIndexNowLogs(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandsomeIndexNowLogs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHandsomeIndexNowLogs(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HandsomeIndexNowLogsV1alpha1Api.getHandsomeIndexNowLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List HandsomeIndexNowLogs
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listHandsomeIndexNowLogs(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandsomeIndexNowLogsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listHandsomeIndexNowLogs(page, size, labelSelector, fieldSelector, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HandsomeIndexNowLogsV1alpha1Api.listHandsomeIndexNowLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Patch HandsomeIndexNowLogs
         * @param {string} name Name of handsomeindexnowlogs
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchHandsomeIndexNowLogs(name: string, jsonPatchInner?: Array<JsonPatchInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandsomeIndexNowLogs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchHandsomeIndexNowLogs(name, jsonPatchInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HandsomeIndexNowLogsV1alpha1Api.patchHandsomeIndexNowLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update HandsomeIndexNowLogs
         * @param {string} name Name of handsomeindexnowlogs
         * @param {HandsomeIndexNowLogs} [handsomeIndexNowLogs] Updated handsomeindexnowlogs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHandsomeIndexNowLogs(name: string, handsomeIndexNowLogs?: HandsomeIndexNowLogs, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandsomeIndexNowLogs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateHandsomeIndexNowLogs(name, handsomeIndexNowLogs, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HandsomeIndexNowLogsV1alpha1Api.updateHandsomeIndexNowLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HandsomeIndexNowLogsV1alpha1Api - factory interface
 * @export
 */
export const HandsomeIndexNowLogsV1alpha1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HandsomeIndexNowLogsV1alpha1ApiFp(configuration)
    return {
        /**
         * Create HandsomeIndexNowLogs
         * @param {HandsomeIndexNowLogsV1alpha1ApiCreateHandsomeIndexNowLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHandsomeIndexNowLogs(requestParameters: HandsomeIndexNowLogsV1alpha1ApiCreateHandsomeIndexNowLogsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<HandsomeIndexNowLogs> {
            return localVarFp.createHandsomeIndexNowLogs(requestParameters.handsomeIndexNowLogs, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete HandsomeIndexNowLogs
         * @param {HandsomeIndexNowLogsV1alpha1ApiDeleteHandsomeIndexNowLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHandsomeIndexNowLogs(requestParameters: HandsomeIndexNowLogsV1alpha1ApiDeleteHandsomeIndexNowLogsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteHandsomeIndexNowLogs(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get HandsomeIndexNowLogs
         * @param {HandsomeIndexNowLogsV1alpha1ApiGetHandsomeIndexNowLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHandsomeIndexNowLogs(requestParameters: HandsomeIndexNowLogsV1alpha1ApiGetHandsomeIndexNowLogsRequest, options?: RawAxiosRequestConfig): AxiosPromise<HandsomeIndexNowLogs> {
            return localVarFp.getHandsomeIndexNowLogs(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * List HandsomeIndexNowLogs
         * @param {HandsomeIndexNowLogsV1alpha1ApiListHandsomeIndexNowLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHandsomeIndexNowLogs(requestParameters: HandsomeIndexNowLogsV1alpha1ApiListHandsomeIndexNowLogsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<HandsomeIndexNowLogsList> {
            return localVarFp.listHandsomeIndexNowLogs(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch HandsomeIndexNowLogs
         * @param {HandsomeIndexNowLogsV1alpha1ApiPatchHandsomeIndexNowLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchHandsomeIndexNowLogs(requestParameters: HandsomeIndexNowLogsV1alpha1ApiPatchHandsomeIndexNowLogsRequest, options?: RawAxiosRequestConfig): AxiosPromise<HandsomeIndexNowLogs> {
            return localVarFp.patchHandsomeIndexNowLogs(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(axios, basePath));
        },
        /**
         * Update HandsomeIndexNowLogs
         * @param {HandsomeIndexNowLogsV1alpha1ApiUpdateHandsomeIndexNowLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHandsomeIndexNowLogs(requestParameters: HandsomeIndexNowLogsV1alpha1ApiUpdateHandsomeIndexNowLogsRequest, options?: RawAxiosRequestConfig): AxiosPromise<HandsomeIndexNowLogs> {
            return localVarFp.updateHandsomeIndexNowLogs(requestParameters.name, requestParameters.handsomeIndexNowLogs, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createHandsomeIndexNowLogs operation in HandsomeIndexNowLogsV1alpha1Api.
 * @export
 * @interface HandsomeIndexNowLogsV1alpha1ApiCreateHandsomeIndexNowLogsRequest
 */
export interface HandsomeIndexNowLogsV1alpha1ApiCreateHandsomeIndexNowLogsRequest {
    /**
     * Fresh handsomeindexnowlogs
     * @type {HandsomeIndexNowLogs}
     * @memberof HandsomeIndexNowLogsV1alpha1ApiCreateHandsomeIndexNowLogs
     */
    readonly handsomeIndexNowLogs?: HandsomeIndexNowLogs
}

/**
 * Request parameters for deleteHandsomeIndexNowLogs operation in HandsomeIndexNowLogsV1alpha1Api.
 * @export
 * @interface HandsomeIndexNowLogsV1alpha1ApiDeleteHandsomeIndexNowLogsRequest
 */
export interface HandsomeIndexNowLogsV1alpha1ApiDeleteHandsomeIndexNowLogsRequest {
    /**
     * Name of handsomeindexnowlogs
     * @type {string}
     * @memberof HandsomeIndexNowLogsV1alpha1ApiDeleteHandsomeIndexNowLogs
     */
    readonly name: string
}

/**
 * Request parameters for getHandsomeIndexNowLogs operation in HandsomeIndexNowLogsV1alpha1Api.
 * @export
 * @interface HandsomeIndexNowLogsV1alpha1ApiGetHandsomeIndexNowLogsRequest
 */
export interface HandsomeIndexNowLogsV1alpha1ApiGetHandsomeIndexNowLogsRequest {
    /**
     * Name of handsomeindexnowlogs
     * @type {string}
     * @memberof HandsomeIndexNowLogsV1alpha1ApiGetHandsomeIndexNowLogs
     */
    readonly name: string
}

/**
 * Request parameters for listHandsomeIndexNowLogs operation in HandsomeIndexNowLogsV1alpha1Api.
 * @export
 * @interface HandsomeIndexNowLogsV1alpha1ApiListHandsomeIndexNowLogsRequest
 */
export interface HandsomeIndexNowLogsV1alpha1ApiListHandsomeIndexNowLogsRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof HandsomeIndexNowLogsV1alpha1ApiListHandsomeIndexNowLogs
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof HandsomeIndexNowLogsV1alpha1ApiListHandsomeIndexNowLogs
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof HandsomeIndexNowLogsV1alpha1ApiListHandsomeIndexNowLogs
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof HandsomeIndexNowLogsV1alpha1ApiListHandsomeIndexNowLogs
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof HandsomeIndexNowLogsV1alpha1ApiListHandsomeIndexNowLogs
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for patchHandsomeIndexNowLogs operation in HandsomeIndexNowLogsV1alpha1Api.
 * @export
 * @interface HandsomeIndexNowLogsV1alpha1ApiPatchHandsomeIndexNowLogsRequest
 */
export interface HandsomeIndexNowLogsV1alpha1ApiPatchHandsomeIndexNowLogsRequest {
    /**
     * Name of handsomeindexnowlogs
     * @type {string}
     * @memberof HandsomeIndexNowLogsV1alpha1ApiPatchHandsomeIndexNowLogs
     */
    readonly name: string

    /**
     * 
     * @type {Array<JsonPatchInner>}
     * @memberof HandsomeIndexNowLogsV1alpha1ApiPatchHandsomeIndexNowLogs
     */
    readonly jsonPatchInner?: Array<JsonPatchInner>
}

/**
 * Request parameters for updateHandsomeIndexNowLogs operation in HandsomeIndexNowLogsV1alpha1Api.
 * @export
 * @interface HandsomeIndexNowLogsV1alpha1ApiUpdateHandsomeIndexNowLogsRequest
 */
export interface HandsomeIndexNowLogsV1alpha1ApiUpdateHandsomeIndexNowLogsRequest {
    /**
     * Name of handsomeindexnowlogs
     * @type {string}
     * @memberof HandsomeIndexNowLogsV1alpha1ApiUpdateHandsomeIndexNowLogs
     */
    readonly name: string

    /**
     * Updated handsomeindexnowlogs
     * @type {HandsomeIndexNowLogs}
     * @memberof HandsomeIndexNowLogsV1alpha1ApiUpdateHandsomeIndexNowLogs
     */
    readonly handsomeIndexNowLogs?: HandsomeIndexNowLogs
}

/**
 * HandsomeIndexNowLogsV1alpha1Api - object-oriented interface
 * @export
 * @class HandsomeIndexNowLogsV1alpha1Api
 * @extends {BaseAPI}
 */
export class HandsomeIndexNowLogsV1alpha1Api extends BaseAPI {
    /**
     * Create HandsomeIndexNowLogs
     * @param {HandsomeIndexNowLogsV1alpha1ApiCreateHandsomeIndexNowLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HandsomeIndexNowLogsV1alpha1Api
     */
    public createHandsomeIndexNowLogs(requestParameters: HandsomeIndexNowLogsV1alpha1ApiCreateHandsomeIndexNowLogsRequest = {}, options?: RawAxiosRequestConfig) {
        return HandsomeIndexNowLogsV1alpha1ApiFp(this.configuration).createHandsomeIndexNowLogs(requestParameters.handsomeIndexNowLogs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete HandsomeIndexNowLogs
     * @param {HandsomeIndexNowLogsV1alpha1ApiDeleteHandsomeIndexNowLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HandsomeIndexNowLogsV1alpha1Api
     */
    public deleteHandsomeIndexNowLogs(requestParameters: HandsomeIndexNowLogsV1alpha1ApiDeleteHandsomeIndexNowLogsRequest, options?: RawAxiosRequestConfig) {
        return HandsomeIndexNowLogsV1alpha1ApiFp(this.configuration).deleteHandsomeIndexNowLogs(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get HandsomeIndexNowLogs
     * @param {HandsomeIndexNowLogsV1alpha1ApiGetHandsomeIndexNowLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HandsomeIndexNowLogsV1alpha1Api
     */
    public getHandsomeIndexNowLogs(requestParameters: HandsomeIndexNowLogsV1alpha1ApiGetHandsomeIndexNowLogsRequest, options?: RawAxiosRequestConfig) {
        return HandsomeIndexNowLogsV1alpha1ApiFp(this.configuration).getHandsomeIndexNowLogs(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List HandsomeIndexNowLogs
     * @param {HandsomeIndexNowLogsV1alpha1ApiListHandsomeIndexNowLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HandsomeIndexNowLogsV1alpha1Api
     */
    public listHandsomeIndexNowLogs(requestParameters: HandsomeIndexNowLogsV1alpha1ApiListHandsomeIndexNowLogsRequest = {}, options?: RawAxiosRequestConfig) {
        return HandsomeIndexNowLogsV1alpha1ApiFp(this.configuration).listHandsomeIndexNowLogs(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patch HandsomeIndexNowLogs
     * @param {HandsomeIndexNowLogsV1alpha1ApiPatchHandsomeIndexNowLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HandsomeIndexNowLogsV1alpha1Api
     */
    public patchHandsomeIndexNowLogs(requestParameters: HandsomeIndexNowLogsV1alpha1ApiPatchHandsomeIndexNowLogsRequest, options?: RawAxiosRequestConfig) {
        return HandsomeIndexNowLogsV1alpha1ApiFp(this.configuration).patchHandsomeIndexNowLogs(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update HandsomeIndexNowLogs
     * @param {HandsomeIndexNowLogsV1alpha1ApiUpdateHandsomeIndexNowLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HandsomeIndexNowLogsV1alpha1Api
     */
    public updateHandsomeIndexNowLogs(requestParameters: HandsomeIndexNowLogsV1alpha1ApiUpdateHandsomeIndexNowLogsRequest, options?: RawAxiosRequestConfig) {
        return HandsomeIndexNowLogsV1alpha1ApiFp(this.configuration).updateHandsomeIndexNowLogs(requestParameters.name, requestParameters.handsomeIndexNowLogs, options).then((request) => request(this.axios, this.basePath));
    }
}

